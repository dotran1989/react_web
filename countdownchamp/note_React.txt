_ State:
+ Component own state.
+ Global state for entire app.

_ Updating state:
+ You must never mutate or change state direct in memory -> bugs in application

Ex: 
this.state.deadline = 'November 5, 2018'
this.state.counter += 1

+ this.setState({...}) -> pass entirely new object with a key value pair

+ 'this.state' and 'this.setState(...)' is extend from Component.

_ Bind methods:

https://www.fullstackreact.com/articles/use-property-initializers-for-cleaner-react-components/


=====================================================
Coding Break: Updating State
Section 2, Lecture 18
Coding Break: Updating State

How about a short coding break? Grab some tea if you’d like. Or just skip to the next video to keep developing countdownChamp!

However, let’s take a moment to think about React state. Now that we have state introduced, let’s lay down the law on how to properly update state without breaking your awesome applications.

The golden rule of React: never mutate state directly. I can’t repeat this enough. In order to change your state data, you can’t manipulate it like you would with normal variables. For example, something like `x++` or `counter += 1` would be fine in any other case. But in order to update state, you must use the setState() function and have new instances of data.

It’s one of those rules that will become more clear as you continue building applications.

So which state in the United States has laws that you can’t update directly?

The React State.

Thank you, I’ll be here all night :)

Let’s keep coding!

=====================================================

_ 'let' for update variable, 'const' for do not update variable.

=====================================================
Section 23.

Summary and Challenges
Section 2, Lecture 23
Countdown Champ

Congratulations on finishing countdown champ! You just built your first app with React JS. Here’s an overview of the important concepts that you just learned:

React Components - re-usable and independent pieces of React code that comprise the User Interface.

ES6 importing and exporting - a new syntax for sharing code between separate files. Used in cases like `import React from ‘react’`

State - the pertinent data to an application. Each component has its local state as long as you declare add the constructor to a Component and declare its state object.

Updating State - When updating state, make sure to never mutate state directly. Doing so will lead to fatal errors in your application. Instead, re-declare new instances of state arrays or objects and use the setState() function to update state.

Props - similar to state, except this data inherits from parent component specifying pieces of state as properties.

LifeCycle Methods - events in React components that trigger in cases such as rendering on or off the screen, or during state updates. One example is the `componentDidMount()` lifeCycle hook.